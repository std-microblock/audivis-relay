#pragma once
#define NOMINMAX
#define WIN32_LEAN_AND_MEAN
#include <Windows.h>
#include <memory>
#include <stdexcept>
#include <vector>

namespace parsec::vusb {
// Forward declarations
class VirtualUSBDevice;

static std::vector<uint8_t> DefaultMicrophoneDescriptor = {
    0x90, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x10, 0x01, 0x00, 0x00, 0x00, 0x08,
    0x55, 0xF0, 0x55, 0xF0, 0x00, 0x01, 0x01, 0x02, 0x00, 0x01, 0x09, 0x04,
    0x04, 0x03, 0x09, 0x04, 0x00, 0x04, 0x00, 0x00, 0x4D, 0x00, 0x69, 0x00,
    0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00,
    0x63, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x01, 0x41,
    0x00, 0x75, 0x00, 0x64, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x73,
    0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00, 0x75,
    0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x41, 0x00, 0x75, 0x00, 0x64,
    0x00, 0x69, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A,
    0x00, 0x02, 0x64, 0x00, 0x09, 0x02, 0x64, 0x00, 0x02, 0x01, 0x00, 0x80,
    0x0A, 0x09, 0x04, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x09, 0x24,
    0x01, 0x00, 0x01, 0x1E, 0x00, 0x01, 0x01, 0x0C, 0x24, 0x02, 0x01, 0x01,
    0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x09, 0x24, 0x03, 0x02, 0x01,
    0x01, 0x00, 0x01, 0x00, 0x09, 0x04, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00,
    0x00, 0x09, 0x04, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x07, 0x24,
    0x01, 0x02, 0x01, 0x01, 0x00, 0x0B, 0x24, 0x02, 0x01, 0x01, 0x02, 0x10,
    0x01, 0x80, 0xBB, 0x00, 0x09, 0x05, 0x81, 0x05, 0x60, 0x00, 0x04, 0x00,
    0x00, 0x07, 0x25, 0x01, 0x00, 0x00, 0x00, 0x00,
};

class VirtualUSBHub {
public:
  VirtualUSBHub();
  ~VirtualUSBHub();
  VirtualUSBHub(const VirtualUSBHub &) = delete;
  VirtualUSBHub &operator=(const VirtualUSBHub &) = delete;
  VirtualUSBHub(VirtualUSBHub &&) noexcept;
  VirtualUSBHub &operator=(VirtualUSBHub &&) noexcept;

  std::unique_ptr<VirtualUSBDevice>
  create_device(const std::vector<uint8_t> &device_descriptor);
  std::unique_ptr<VirtualUSBDevice> open_device(int device_id);

private:
  void close();
  HANDLE _handle = INVALID_HANDLE_VALUE;
};

class VirtualUSBDevice {
public:
  ~VirtualUSBDevice();
  VirtualUSBDevice(const VirtualUSBDevice &) = delete;
  VirtualUSBDevice &operator=(const VirtualUSBDevice &) = delete;
  VirtualUSBDevice(VirtualUSBDevice &&) noexcept;
  VirtualUSBDevice &operator=(VirtualUSBDevice &&) noexcept;

  void configure_endpoints(const std::vector<uint8_t> &endpointIds);
  void configure_endpoint_types(const std::vector<int32_t> &endpointTypes);
  void plug_in();
  void unplug();
  bool submit_audio_data(const std::vector<uint8_t> &data);
  inline bool submit_audio_data(const std::vector<int16_t> &data) {
    return submit_audio_data(std::vector<uint8_t>(reinterpret_cast<const uint8_t *>(data.data()),
                                                    reinterpret_cast<const uint8_t *>(data.data() + data.size())));
  }

  inline uint32_t device_id() const { return _device_id; } 
private:
  friend class VirtualUSBHub;
  VirtualUSBDevice(HANDLE hub_handle,
                   const std::vector<uint8_t> &device_descriptor);
  VirtualUSBDevice(HANDLE hub_handle, uint32_t device_id);
  void close();

  HANDLE _hub_handle = INVALID_HANDLE_VALUE;
  uint32_t _device_id = 0;
  HANDLE _control_wait_event = nullptr;
  HANDLE _cancelled_wait_event = nullptr;
};

class VUSBError : public std::runtime_error {
public:
  VUSBError(const std::string &message, DWORD error_code = 0);
  DWORD error_code() const;

private:
  DWORD _error_code;
};

} // namespace parsec::vusb
